{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Questions from \"../slices/Questions\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar QuizOne = function QuizOne(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedOption = _useState2[0],\n    setSelectedOption = _useState2[1];\n  var _useState3 = useState(0),\n    _useState4 = _slicedToArray(_useState3, 2),\n    currentQuestionIndex = _useState4[0],\n    setCurrentQuestionIndex = _useState4[1];\n  var _useState5 = useState(0),\n    _useState6 = _slicedToArray(_useState5, 2),\n    score = _useState6[0],\n    setScore = _useState6[1];\n  var data = Questions;\n  var currentQuestion = data[currentQuestionIndex];\n  var handleOptionPress = function handleOptionPress(optionId) {\n    setSelectedOption(optionId);\n  };\n  var handleNextPress = function handleNextPress() {\n    if (selectedOption == currentQuestion.correctAnswerIndex) {\n      setScore(score + 1);\n    }\n    setSelectedOption(null);\n    if (currentQuestionIndex < data.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      navigation.navigate(\"Results\", {\n        score: score\n      });\n    }\n  };\n  useEffect(function () {\n    setSelectedOption(null);\n  }, [currentQuestionIndex]);\n  return _jsxs(SafeAreaView, {\n    style: styles.container,\n    children: [_jsx(View, {\n      style: styles.questionContainer,\n      children: _jsx(Text, {\n        style: styles.questionText,\n        children: currentQuestion.question\n      })\n    }), _jsx(View, {\n      style: styles.optionsContainer,\n      children: currentQuestion.options.map(function (option) {\n        return _jsx(TouchableOpacity, {\n          style: [styles.option, selectedOption === option && styles.selectedOption],\n          onPress: function onPress() {\n            handleOptionPress(option.id);\n          },\n          disabled: selectedOption !== null,\n          children: _jsx(Text, {\n            style: styles.optionText,\n            children: option.answer\n          })\n        }, option.id);\n      })\n    }), _jsx(TouchableOpacity, {\n      style: styles.button,\n      onPress: handleNextPress,\n      disabled: selectedOption === null,\n      children: _jsx(Text, {\n        style: styles.buttonText,\n        children: \"Next\"\n      })\n    }), _jsxs(Text, {\n      style: styles.scoreText,\n      children: [\"Score: \", score, \"/\", currentQuestionIndex]\n    })]\n  });\n};\nexport default QuizOne;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: 20\n  },\n  questionContainer: {\n    flex: 1,\n    justifyContent: \"center\"\n  },\n  questionText: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n    textAlign: \"center\"\n  },\n  optionsContainer: {\n    flex: 3,\n    justifyContent: \"flex-start\",\n    alignItems: \"stretch\"\n  },\n  option: {\n    borderWidth: 1,\n    borderColor: \"black\",\n    borderRadius: 10,\n    padding: 20,\n    marginVertical: 10,\n    backgroundColor: \"white\"\n  },\n  selectedOption: {\n    backgroundColor: \"grey\"\n  },\n  optionText: {\n    fontSize: 16,\n    textAlign: \"center\"\n  },\n  button: {\n    marginTop: 30,\n    paddingVertical: 10,\n    paddingHorizontal: 20,\n    backgroundColor: \"blue\",\n    borderRadius: 5\n  },\n  buttonText: {\n    color: \"white\",\n    fontSize: 18,\n    textAlign: \"center\"\n  },\n  scoreText: {\n    marginTop: 20,\n    fontSize: 16,\n    textAlign: \"center\"\n  }\n});","map":{"version":3,"names":["React","useState","StyleSheet","Text","View","SafeAreaView","TouchableOpacity","Questions","jsx","_jsx","jsxs","_jsxs","QuizOne","_ref","navigation","_useState","_useState2","_slicedToArray","selectedOption","setSelectedOption","_useState3","_useState4","currentQuestionIndex","setCurrentQuestionIndex","_useState5","_useState6","score","setScore","data","currentQuestion","handleOptionPress","optionId","handleNextPress","correctAnswerIndex","length","navigate","useEffect","style","styles","container","children","questionContainer","questionText","question","optionsContainer","options","map","option","onPress","id","disabled","optionText","answer","button","buttonText","scoreText","create","flex","alignItems","justifyContent","padding","fontSize","fontWeight","textAlign","borderWidth","borderColor","borderRadius","marginVertical","backgroundColor","marginTop","paddingVertical","paddingHorizontal","color"],"sources":["C:/Users/domin/OneDrive/Desktop/3150-Proj-2/myQuizApp/my-app/screens/QuizOne.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  StyleSheet,\r\n  Text,\r\n  View,\r\n  SafeAreaView,\r\n  TouchableOpacity,\r\n} from \"react-native\";\r\nimport Questions from \"../slices/Questions\";\r\n\r\nconst QuizOne = ({ navigation }) => {\r\n  const [selectedOption, setSelectedOption] = useState(null);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [score, setScore] = useState(0);\r\n\r\n  const data = Questions;\r\n  const currentQuestion = data[currentQuestionIndex];\r\n\r\n  const handleOptionPress = (optionId) => {\r\n    setSelectedOption(optionId);\r\n  };\r\n\r\n  const handleNextPress = () => {\r\n    if (selectedOption == currentQuestion.correctAnswerIndex) {\r\n      setScore(score + 1);\r\n    }\r\n    setSelectedOption(null);\r\n    if (currentQuestionIndex < data.length - 1) {\r\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n    } else {\r\n      navigation.navigate(\"Results\", { score });\r\n    }\r\n  };\r\n\r\n    useEffect(() => {\r\n      setSelectedOption(null);\r\n    }, [currentQuestionIndex]);\r\n\r\n  return (\r\n    <SafeAreaView style={styles.container}>\r\n      <View style={styles.questionContainer}>\r\n        <Text style={styles.questionText}>{currentQuestion.question}</Text>\r\n      </View>\r\n      <View style={styles.optionsContainer}>\r\n        {currentQuestion.options.map((option) => (\r\n          <TouchableOpacity\r\n            key={option.id}\r\n            style={[\r\n              styles.option,\r\n              selectedOption === option && styles.selectedOption,\r\n            ]}\r\n            onPress={() => {\r\n              handleOptionPress(option.id);\r\n            }}\r\n            disabled={selectedOption !== null}\r\n          >\r\n            <Text style={styles.optionText}>{option.answer}</Text>\r\n          </TouchableOpacity>\r\n        ))}\r\n      </View>\r\n      <TouchableOpacity\r\n        style={styles.button}\r\n        onPress={handleNextPress}\r\n        disabled={selectedOption === null}\r\n      >\r\n        <Text style={styles.buttonText}>Next</Text>\r\n      </TouchableOpacity>\r\n      <Text style={styles.scoreText}>\r\n        Score: {score}/{currentQuestionIndex}\r\n      </Text>\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\nexport default QuizOne;\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    padding: 20,\r\n  },\r\n  questionContainer: {\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n  },\r\n  questionText: {\r\n    fontSize: 20,\r\n    fontWeight: \"bold\",\r\n    textAlign: \"center\",\r\n  },\r\n  optionsContainer: {\r\n    flex: 3,\r\n    justifyContent: \"flex-start\",\r\n    alignItems: \"stretch\",\r\n  },\r\n  option: {\r\n    borderWidth: 1,\r\n    borderColor: \"black\",\r\n    borderRadius: 10,\r\n    padding: 20,\r\n    marginVertical: 10,\r\n    backgroundColor: \"white\",\r\n  },\r\n  selectedOption: {\r\n    backgroundColor: \"grey\",\r\n  },\r\n  optionText: {\r\n    fontSize: 16,\r\n    textAlign: \"center\",\r\n  },\r\n  button: {\r\n    marginTop: 30,\r\n    paddingVertical: 10,\r\n    paddingHorizontal: 20,\r\n    backgroundColor: \"blue\",\r\n    borderRadius: 5,\r\n  },\r\n  buttonText: {\r\n    color: \"white\",\r\n    fontSize: 18,\r\n    textAlign: \"center\",\r\n  },\r\n  scoreText: {\r\n    marginTop: 20,\r\n    fontSize: 16,\r\n    textAlign: \"center\",\r\n  },\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport React, { useState, useEffect } from \"react\";\nimport Questions from \"../slices/Questions\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar QuizOne = function QuizOne(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedOption = _useState2[0],\n    setSelectedOption = _useState2[1];\n  var _useState3 = useState(0),\n    _useState4 = _slicedToArray(_useState3, 2),\n    currentQuestionIndex = _useState4[0],\n    setCurrentQuestionIndex = _useState4[1];\n  var _useState5 = useState(0),\n    _useState6 = _slicedToArray(_useState5, 2),\n    score = _useState6[0],\n    setScore = _useState6[1];\n  var data = Questions;\n  var currentQuestion = data[currentQuestionIndex];\n  var handleOptionPress = function handleOptionPress(optionId) {\n    console.log(optionId);\n    setSelectedOption(optionId);\n  };\n  var handleNextPress = function handleNextPress() {\n    if (selectedOption == currentQuestion.correctAnswerIndex) {\n      console.log(\"meow\");\n      setScore(score + 1);\n    }\n    setSelectedOption(null);\n    if (currentQuestionIndex < data.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      navigation.navigate(\"Results\", {\n        score: score\n      });\n    }\n  };\n  useEffect(function () {\n    setSelectedOption(null);\n  }, [currentQuestionIndex]);\n  return _jsxs(SafeAreaView, {\n    children: [_jsx(Text, {\n      children: currentQuestion.question\n    }), currentQuestion.options.map(function (option) {\n      return _jsx(TouchableOpacity, {\n        style: [styles.option, selectedOption === option.id && styles.selectedOption],\n        onPress: function onPress() {\n          handleOptionPress(option.id);\n        },\n        children: _jsx(Text, {\n          children: option.answer\n        })\n      }, option.id);\n    }), _jsx(TouchableOpacity, {\n      onPress: handleNextPress,\n      children: _jsx(Text, {\n        children: \"Next\"\n      })\n    }), _jsxs(Text, {\n      children: [\"answer: \", currentQuestion.correctAnswerIndex]\n    }), _jsxs(Text, {\n      children: [\"selected: \", selectedOption]\n    }), _jsxs(Text, {\n      children: [\"Score: Score: \", score, \"/\", currentQuestionIndex]\n    })]\n  });\n};\nexport default QuizOne;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: 20\n  },\n  questionContainer: {\n    flex: 1,\n    justifyContent: \"center\"\n  },\n  questionText: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n    textAlign: \"center\"\n  },\n  optionsContainer: {\n    flex: 3,\n    justifyContent: \"flex-start\",\n    alignItems: \"stretch\"\n  },\n  option: {\n    borderWidth: 1,\n    borderColor: \"black\",\n    borderRadius: 10,\n    padding: 20,\n    marginVertical: 10,\n    backgroundColor: \"white\"\n  },\n  selectedOption: {\n    backgroundColor: \"grey\"\n  },\n  optionText: {\n    fontSize: 16,\n    textAlign: \"center\"\n  },\n  button: {\n    marginTop: 30,\n    paddingVertical: 10,\n    paddingHorizontal: 20,\n    backgroundColor: \"blue\",\n    borderRadius: 5\n  },\n  buttonText: {\n    color: \"white\",\n    fontSize: 18,\n    textAlign: \"center\"\n  },\n  scoreText: {\n    marginTop: 20,\n    fontSize: 16,\n    textAlign: \"center\"\n  }\n});","map":{"version":3,"names":["React","useState","useEffect","Questions","jsx","_jsx","jsxs","_jsxs","QuizOne","_ref","navigation","_useState","_useState2","_slicedToArray","selectedOption","setSelectedOption","_useState3","_useState4","currentQuestionIndex","setCurrentQuestionIndex","_useState5","_useState6","score","setScore","data","currentQuestion","handleOptionPress","optionId","console","log","handleNextPress","correctAnswerIndex","length","navigate","SafeAreaView","children","Text","question","options","map","option","TouchableOpacity","style","styles","id","onPress","answer","StyleSheet","create","container","flex","alignItems","justifyContent","padding","questionContainer","questionText","fontSize","fontWeight","textAlign","optionsContainer","borderWidth","borderColor","borderRadius","marginVertical","backgroundColor","optionText","button","marginTop","paddingVertical","paddingHorizontal","buttonText","color","scoreText"],"sources":["C:/Users/domin/OneDrive/Desktop/3150-Proj-2/myQuizApp/my-app/screens/QuizOne.js"],"sourcesContent":["import {\r\n  StyleSheet,\r\n  Text,\r\n  View,\r\n  SafeAreaView,\r\n  TouchableOpacity,\r\n  Pressable,\r\n} from \"react-native\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Questions from \"../slices/Questions\";\r\n\r\nconst QuizOne = ({ navigation }) => {\r\n  const [selectedOption, setSelectedOption] = useState(null);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [score, setScore] = useState(0);\r\n\r\n  const data = Questions;\r\n  const currentQuestion = data[currentQuestionIndex];\r\n\r\n  const handleOptionPress = (optionId) => {\r\n    console.log(optionId);\r\n    setSelectedOption(optionId);\r\n  };\r\n\r\n  const handleNextPress = () => {\r\n    if (selectedOption == currentQuestion.correctAnswerIndex) {\r\n      console.log(\"meow\");\r\n      setScore(score + 1);\r\n    }\r\n    setSelectedOption(null);\r\n    if (currentQuestionIndex < data.length - 1) {\r\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n    } else {\r\n      navigation.navigate(\"Results\", { score });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setSelectedOption(null);\r\n  }, [currentQuestionIndex]);\r\n\r\n  return (\r\n    <SafeAreaView>\r\n      <Text>{currentQuestion.question}</Text>\r\n      {currentQuestion.options.map((option) => (\r\n        <TouchableOpacity\r\n          key={option.id}\r\n          style={[\r\n            styles.option,\r\n            selectedOption === option.id && styles.selectedOption,\r\n          ]}\r\n          onPress={() => {\r\n            handleOptionPress(option.id);\r\n          }}\r\n        >\r\n          <Text>{option.answer}</Text>\r\n        </TouchableOpacity>\r\n      ))}\r\n      <TouchableOpacity onPress={handleNextPress}>\r\n        <Text>Next</Text>\r\n      </TouchableOpacity>\r\n      <Text>answer: {currentQuestion.correctAnswerIndex}</Text>\r\n      <Text>selected: {selectedOption}</Text>\r\n      <Text>\r\n        Score: Score: {score}/{currentQuestionIndex}\r\n      </Text>\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\nexport default QuizOne;\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    padding: 20,\r\n  },\r\n  questionContainer: {\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n  },\r\n  questionText: {\r\n    fontSize: 20,\r\n    fontWeight: \"bold\",\r\n    textAlign: \"center\",\r\n  },\r\n  optionsContainer: {\r\n    flex: 3,\r\n    justifyContent: \"flex-start\",\r\n    alignItems: \"stretch\",\r\n  },\r\n  option: {\r\n    borderWidth: 1,\r\n    borderColor: \"black\",\r\n    borderRadius: 10,\r\n    padding: 20,\r\n    marginVertical: 10,\r\n    backgroundColor: \"white\",\r\n  },\r\n  selectedOption: {\r\n    backgroundColor: \"grey\",\r\n  },\r\n  optionText: {\r\n    fontSize: 16,\r\n    textAlign: \"center\",\r\n  },\r\n  button: {\r\n    marginTop: 30,\r\n    paddingVertical: 10,\r\n    paddingHorizontal: 20,\r\n    backgroundColor: \"blue\",\r\n    borderRadius: 5,\r\n  },\r\n  buttonText: {\r\n    color: \"white\",\r\n    fontSize: 18,\r\n    textAlign: \"center\",\r\n  },\r\n  scoreText: {\r\n    marginTop: 20,\r\n    fontSize: 16,\r\n    textAlign: \"center\",\r\n  },\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
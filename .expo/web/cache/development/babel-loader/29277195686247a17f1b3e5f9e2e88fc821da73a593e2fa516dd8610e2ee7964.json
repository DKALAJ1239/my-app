{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport React, { useState } from \"react\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar QuizTwo = function QuizTwo(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedOption = _useState2[0],\n    setSelectedOption = _useState2[1];\n  var _useState3 = useState(0),\n    _useState4 = _slicedToArray(_useState3, 2),\n    currentQuestionIndex = _useState4[0],\n    setCurrentQuestionIndex = _useState4[1];\n  var _useState5 = useState(0),\n    _useState6 = _slicedToArray(_useState5, 2),\n    score = _useState6[0],\n    setScore = _useState6[1];\n  var data = [{\n    id: 1,\n    question: \"Where is this location?\",\n    imageUrl: \"https://maps.googleapis.com/maps/api/staticmap?center=40.712776,-74.005974&zoom=14&size=400x400&key=YOUR_API_KEY\",\n    options: [\"New York City\", \"Los Angeles\", \"Chicago\", \"Miami\"],\n    correctAnswerIndex: 0\n  }, {\n    id: 2,\n    question: \"Where is this location?\",\n    imageUrl: \"https://maps.googleapis.com/maps/api/staticmap?center=51.507351,-0.127758&zoom=14&size=400x400&key=YOUR_API_KEY\",\n    options: [\"Paris\", \"London\", \"Berlin\", \"Madrid\"],\n    correctAnswerIndex: 1\n  }];\n  var currentQuestion = data[currentQuestionIndex];\n  var handleOptionPress = function handleOptionPress(optionId) {\n    setSelectedOption(optionId);\n  };\n  var handleNextPress = function handleNextPress() {\n    if (selectedOption == currentQuestion.correctAnswerIndex) {\n      setScore(score + 1);\n    }\n    setSelectedOption(null);\n    if (currentQuestionIndex < data.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      navigation.navigate(\"Results\", {\n        score: score\n      });\n    }\n  };\n  return _jsxs(SafeAreaView, {\n    children: [_jsx(Image, {\n      style: {\n        width: 400,\n        height: 400\n      },\n      source: {\n        uri: currentQuestion.imageUrl\n      }\n    }), currentQuestion.options.map(function (option, index) {\n      return _jsx(TouchableOpacity, {\n        style: [styles.option, selectedOption === index && styles.selectedOption],\n        onPress: function onPress() {\n          handleOptionPress(index);\n        },\n        children: _jsx(Text, {\n          children: option\n        })\n      }, index);\n    }), _jsx(TouchableOpacity, {\n      onPress: handleNextPress,\n      children: _jsx(Text, {\n        children: \"Next\"\n      })\n    }), _jsxs(Text, {\n      children: [\"Answer: \", currentQuestion.options[currentQuestion.correctAnswerIndex]]\n    }), _jsxs(Text, {\n      children: [\"Selected: \", currentQuestion.options[selectedOption]]\n    }), _jsxs(Text, {\n      children: [\"Score: \", score, \"/\", currentQuestionIndex]\n    })]\n  });\n};\nexport default QuizTwo;\nvar styles = StyleSheet.create({\n  option: {\n    borderWidth: 1,\n    borderColor: \"black\",\n    padding: 10,\n    marginVertical: 10\n  },\n  selectedOption: {\n    backgroundColor: \"grey\"\n  }\n});","map":{"version":3,"names":["React","useState","jsx","_jsx","jsxs","_jsxs","QuizTwo","_ref","navigation","_useState","_useState2","_slicedToArray","selectedOption","setSelectedOption","_useState3","_useState4","currentQuestionIndex","setCurrentQuestionIndex","_useState5","_useState6","score","setScore","data","id","question","imageUrl","options","correctAnswerIndex","currentQuestion","handleOptionPress","optionId","handleNextPress","length","navigate","SafeAreaView","children","Image","style","width","height","source","uri","map","option","index","TouchableOpacity","styles","onPress","Text","StyleSheet","create","borderWidth","borderColor","padding","marginVertical","backgroundColor"],"sources":["C:/Users/domin/OneDrive/Desktop/3150-Proj-2/myQuizApp/my-app/screens/QuizTwo.js"],"sourcesContent":["import {\r\n  StyleSheet,\r\n  Text,\r\n  View,\r\n  SafeAreaView,\r\n  TouchableOpacity,\r\n  Pressable,\r\n  Image,\r\n} from \"react-native\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst QuizTwo = ({ navigation }) => {\r\n  const [selectedOption, setSelectedOption] = useState(null);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [score, setScore] = useState(0);\r\n\r\n  const data = [\r\n    {\r\n      id: 1,\r\n      question: \"Where is this location?\",\r\n      imageUrl: `https://maps.googleapis.com/maps/api/staticmap?center=40.712776,-74.005974&zoom=14&size=400x400&key=YOUR_API_KEY`,\r\n      options: [\"New York City\", \"Los Angeles\", \"Chicago\", \"Miami\"],\r\n      correctAnswerIndex: 0,\r\n    },\r\n    {\r\n      id: 2,\r\n      question: \"Where is this location?\",\r\n      imageUrl: `https://maps.googleapis.com/maps/api/staticmap?center=51.507351,-0.127758&zoom=14&size=400x400&key=YOUR_API_KEY`,\r\n      options: [\"Paris\", \"London\", \"Berlin\", \"Madrid\"],\r\n      correctAnswerIndex: 1,\r\n    },\r\n    // Add more questions as needed\r\n  ];\r\n\r\n  const currentQuestion = data[currentQuestionIndex];\r\n\r\n  const handleOptionPress = (optionId) => {\r\n    setSelectedOption(optionId);\r\n  };\r\n\r\n  const handleNextPress = () => {\r\n    if (selectedOption == currentQuestion.correctAnswerIndex) {\r\n      setScore(score + 1);\r\n    }\r\n    setSelectedOption(null);\r\n    if (currentQuestionIndex < data.length - 1) {\r\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n    } else {\r\n      navigation.navigate(\"Results\", { score });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <SafeAreaView>\r\n      <Image\r\n        style={{ width: 400, height: 400 }}\r\n        source={{ uri: currentQuestion.imageUrl }}\r\n      />\r\n      {currentQuestion.options.map((option, index) => (\r\n        <TouchableOpacity\r\n          key={index}\r\n          style={[\r\n            styles.option,\r\n            selectedOption === index && styles.selectedOption,\r\n          ]}\r\n          onPress={() => {\r\n            handleOptionPress(index);\r\n          }}\r\n        >\r\n          <Text>{option}</Text>\r\n        </TouchableOpacity>\r\n      ))}\r\n      <TouchableOpacity onPress={handleNextPress}>\r\n        <Text>Next</Text>\r\n      </TouchableOpacity>\r\n      <Text>Answer: {currentQuestion.options[currentQuestion.correctAnswerIndex]}</Text>\r\n      <Text>Selected: {currentQuestion.options[selectedOption]}</Text>\r\n      <Text>Score: {score}/{currentQuestionIndex}</Text>\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\nexport default QuizTwo;\r\n\r\nconst styles = StyleSheet.create({\r\n  option: {\r\n    borderWidth: 1,\r\n    borderColor: \"black\",\r\n    padding: 10,\r\n    marginVertical: 10,\r\n  },\r\n  selectedOption: {\r\n    backgroundColor: \"grey\",\r\n  },\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}